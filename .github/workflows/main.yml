# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
name: build

on:
  pull_request:
  push:
    branches: [ master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: set PY
        run: echo "::set-env name=PY::$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
      - name: Add Poetry to Path Unix
        run: echo "::add-path::$HOME/.poetry/bin"
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
      - name: Cache Poetry virtualenv
        uses: actions/cache@v2.0.0
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: poetry|pre-commit|${{ env.PY }}|${{ hashFiles('poetry.lock') }}
      - name: Install Project Dependencies (Poetry)
        run: |
          poetry install -vvv
        if: steps.cache-poetry.outputs.cache-hit != 'true'
      - name: Add poetry env to PATH
        run: |
          echo "::add-path::$( poetry env info --path )/bin"
      - uses: actions/cache@v2.0.0
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - uses: pre-commit/action@v1.0.1
  test:
    needs: lint
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: [ 3.6, 3.7, 3.8]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get full python version
        id: full-python-version
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
      - name: Set Poetry to Path Windows
        run: echo "::add-path::%USERPROFILE%\.poetry\bin"
        if: ${{ runner.os }} == "Windows"
      - name: Add Poetry to Path Unix
        run: echo "::add-path::$HOME/.poetry/bin"
        if: (${{ runner.os }} == "Linux") || (${{ runner.os }} == "macOS")
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
      - name: Cache Poetry virtualenv
        uses: actions/cache@v2.0.0
        id: cache-poetry
        with:
          path: .venv
          key: poetry|${{ matrix.os }}|${{ steps.full-python-version.outputs.version }}|${{ hashFiles('poetry.lock') }}
      - name: Install Project Dependencies (Poetry)
        run: |
          poetry install -vvv
        if: steps.cache-poetry.outputs.cache-hit != 'true'
      - name: Run pytest
        run : poetry run pytest --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.7
        env:
          OS: ${{ matrix.os }}
          PYTHON: ${{ matrix.python-version }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true
